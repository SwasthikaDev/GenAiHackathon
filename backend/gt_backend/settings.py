"""
Django settings for gt_backend project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from corsheaders.defaults import default_headers, default_methods
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from backend/.env and project root .env
# BASE_DIR points to backend/gt_backend
_backend_env = BASE_DIR.parent / ".env"           # MVP/backend/.env
_project_root_env = BASE_DIR.parent.parent / ".env"  # MVP/.env
load_dotenv(_backend_env)
load_dotenv(_project_root_env)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "1") == "1"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if os.getenv("DJANGO_ALLOWED_HOSTS") else []
# Ensure common local hosts
for _h in ["localhost", "127.0.0.1"]:
    if _h not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(_h)
# Add known ngrok hosts (backend URL)
for _ng in [
    "mako-golden-tetra.ngrok-free.app"
]:
    if _ng not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(_ng)


# Application definition

INSTALLED_APPS = [
    # Jazzmin must be before django.contrib.admin
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party
    'rest_framework',
    'corsheaders',
    'drf_spectacular',

    # Local apps
    'accounts',
    'trips',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gt_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins': [
                'gt_backend.templatetags.compat',
            ],
        },
    },
]

WSGI_APPLICATION = 'gt_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

USE_POSTGRES = os.getenv("DJANGO_USE_POSTGRES", "0") == "1"
if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DJANGO_DB_NAME', 'gt_db'),
            'USER': os.getenv('DJANGO_DB_USER', 'gt_user'),
            'PASSWORD': os.getenv('DJANGO_DB_PASSWORD', 'gt_password'),
            'HOST': os.getenv('DJANGO_DB_HOST', 'localhost'),
            'PORT': os.getenv('DJANGO_DB_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# DRF / Auth
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.ScopedRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'personalized': os.getenv('THROTTLE_PERSONALIZED', '3/min'),
        'generate': os.getenv('THROTTLE_GENERATE', '2/min'),
        'search_cities': os.getenv('THROTTLE_SEARCH_CITIES', '20/min'),
        'search_activities': os.getenv('THROTTLE_SEARCH_ACTIVITIES', '60/min'),
        'user': os.getenv('THROTTLE_USER', '1000/day'),
        'anon': os.getenv('THROTTLE_ANON', '100/day'),
    },
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'GlobalTrotters API',
    'DESCRIPTION': 'API for the GlobalTrotters travel planner',
    'VERSION': '0.1.0',
}

# Email (for password reset) - console by default
EMAIL_BACKEND = os.getenv('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
DEFAULT_FROM_EMAIL = os.getenv('DJANGO_DEFAULT_FROM_EMAIL', 'no-reply@globaltrotters.app')

# Jazzmin minimal config (optional branding)
JAZZMIN_SETTINGS = {
    "site_title": "GlobalTrotters Admin",
    "site_header": "GlobalTrotters",
    "welcome_sign": "Welcome to GlobalTrotters Admin",
    "show_ui_builder": False,
}

# CORS
CORS_ALLOW_CREDENTIALS = True
_cors_origins = os.getenv("DJANGO_CORS_ALLOWED_ORIGINS", "").split(",") if os.getenv("DJANGO_CORS_ALLOWED_ORIGINS") else []
CORS_ALLOWED_ORIGINS = [o.strip() for o in _cors_origins if o.strip()]
# Allow any ngrok-free.app frontend origin during development
CORS_ALLOWED_ORIGIN_REGEXES = [r"^https://.*\\.ngrok-free\\.app$"]

# Temporarily allow all origins during development to avoid preflight mismatches
CORS_ALLOW_ALL_ORIGINS = True

# Be explicit about allowed headers/methods to satisfy strict browsers
CORS_ALLOW_HEADERS = list(default_headers) + [
    "content-type",
    "authorization",
    "x-requested-with",
    "x-csrftoken",
    "sec-ch-ua",
    "sec-ch-ua-mobile",
    "sec-ch-ua-platform",
]
CORS_ALLOW_METHODS = list(default_methods)
CORS_PREFLIGHT_MAX_AGE = int(os.getenv("CORS_PREFLIGHT_MAX_AGE", "86400"))

# CSRF trusted (mainly if cookies are used); safe for dev with ngrok
CSRF_TRUSTED_ORIGINS = list({
    *[o for o in CORS_ALLOWED_ORIGINS if o.startswith("http")],
    "https://*.ngrok-free.app",
})

# Simple JWT lifetimes (longer sessions)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_MINUTES', '60'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_DAYS', '7'))),
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'accounts.User'
